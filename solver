import numpy as np

class solver():
    def __init__(self, board):
        self.board = np.array(board)

    def get_exist_values(self, rows, cols):
        row_val = np.unique(self.board[rows, :])
        col_val = np.unique(self.board[:, cols])

        row_square = int(np.ceil((rows + 1) / 3) * 3)
        col_square = int(np.ceil((cols + 1) / 3) * 3)
        square_val = np.unique(self.board[row_square - 3:row_square, col_square - 3:col_square])

        all_exist_num = np.concatenate((row_val, col_val, square_val), axis=None)
        exist_num = np.unique(all_exist_num)

        return exist_num

    def check_solution(self, rows, cols):
        if self.board[rows, cols] == 0:
            exist_num = self.get_exist_values(rows, cols)
            solutions = [value for value in range(1, 10) if value not in exist_num]
            if len(solutions) == 1:
                self.board[rows, cols] = solutions[0]

    def solve(self):
        print('start')
        for i in range(10):
            for row in range(9):
                for column in range(9):
                    solver.check_solution(self, row, column)

        zeroes = np.count_nonzero(self.board == 0)  # if there is no zeroes left in the board
        print("zero")
        print(self.board)
        if zeroes == 0:
            return self.board
        else:
            return False

    def getSolution(self):
        if solver.solve(self) is not False:
            print(self.board)
            board = np.array(self.board)
            print("s")
            print("board", board)
            return board
        else:
            return False


solver(grid).getSolution()

